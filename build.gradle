
plugins {
    id 'jacoco'
    id 'maven-publish'
    id 'java-library'
    id 'ru.vyarus.pom' version '2.1.0'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'org.sonarqube' version '3.5.0.2730'
    id 'pl.allegro.tech.build.axion-release' version '1.15.0'
    id 'org.springframework.boot' version '3.0.6'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.diffplug.spotless' version "6.16.0"
    id "io.freefair.lombok" version "6.6.2"
}

project.version = scmVersion.version

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

allprojects {
    repositories {
        mavenCentral()
    }

    bootJar {
        enabled = false
    }
}

subprojects {

    group = 'com.github.ehayik.toolbelt'
    version = rootProject.version

    apply plugin: 'jacoco'
    apply plugin: 'java-library'
    apply plugin: 'ru.vyarus.pom'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply from: "$rootDir/gradle/ext/publish-common.gradle"

    //-- Java Source
    java {
        withSourcesJar()

        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    //-- Testing
    tasks.named('test') {
        useJUnitPlatform()
    }

    //-- Code coverage
    jacocoTestReport {
        reports {
            xml.required.set(true)
        }
    }

    test.finalizedBy jacocoTestReport

    //-- Static code analysis
    sonarqube {
        properties {
            property "sonar.projectKey", "ehayik_spring-viewfx"
            property "sonar.organization", "eljaiek"
            property "sonar.host.url", "https://sonarcloud.io"
        }
    }

    //-- Code formatting
    spotless {
        java {
            target fileTree('.') {
                include '**/*.java'
                exclude '**/build/**', '**/build-*/**'
            }
            palantirJavaFormat()
            importOrder()
            removeUnusedImports()
            trimTrailingWhitespace()
            endWithNewline()
            toggleOffOn()
        }
    }

    tasks.register('updateGitHooks', Copy) {
        from './scripts/pre-commit'
        into './.git/hooks'
    }

    compileJava.dependsOn updateGitHooks

    //-- Publishing
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                pom { x -> pom(x) }
            }
        }

//        repositories {
//            maven { x -> nexusRepository(x) }
//        }
    }
}